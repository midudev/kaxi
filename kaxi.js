// Generated by CoffeeScript 1.6.2
var kaxi;

kaxi = (function() {
  var EXPIRY_RADIX, EXPIRY_UNITS, MAX_DATE, PREFIX, SUFFIX, cacheBucket, currentTime, expirationKey, getItem, removeItem, setItem, supportsJSON, supportsStorage;

  PREFIX = 'k_';
  SUFFIX = '-cacheexpiration';
  EXPIRY_RADIX = 10;
  EXPIRY_UNITS = 60 * 1000;
  MAX_DATE = Math.floor(8.64e15 / EXPIRY_UNITS);
  cacheBucket = '';
  supportsStorage = function() {
    return window['localStorage'] !== null;
  };
  supportsJSON = function() {
    return window.JSON !== null;
  };
  expirationKey = function(key) {
    return key + SUFFIX;
  };
  currentTime = function() {
    return Math.floor((new Date().getTime()) / EXPIRY_UNITS);
  };
  getItem = function(key) {
    return localStorage.getItem(PREFIX + cacheBucket + key);
  };
  setItem = function(key, value) {
    localStorage.removeItem(PREFIX + cacheBucket + key);
    return localStorage.setItem(PREFIX + cacheBucket + key, value);
  };
  removeItem = function(key) {
    return localStorage.removeItem(PREFIX + cacheBucket + key);
  };
  return {
    set: function(key, value, time) {
      var e, expiration, exprKey, i, mainKey, storedKey, storedKeys, targetSize;

      if (!supportsStorage()) {
        return;
      }
      if (typeof value !== 'string') {
        if (!supportsJSON()) {
          return;
        }
        try {
          value = JSON.stringify(value);
        } catch (_error) {
          e = _error;
          return;
        }
      }
      try {
        setItem(key, value);
      } catch (_error) {
        e = _error;
        if (e.name === 'QUOTA_EXCEEDED_ERR' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {
          storedKeys = [];
          i = 0;
          while (i < localStorage.length) {
            storedKey = localStorage.key(i);
            if (storedKey.indexOf(PREFIX + cacheBucket) === 0 && storedKey.indexOf(SUFFIX) < 0) {
              mainKey = storedKey.substr((PREFIX + cacheBucket).length);
              exprKey = expirationKey(mainKey);
              expiration = getItem(exprKey);
              if (expiration) {
                expiration = parseInt(expiration, EXPIRY_RADIX);
              } else {
                expiration = MAX_DATE;
              }
              storedKeys.push({
                key: mainKey,
                size: (getItem(mainKey) || '').length,
                expiration: expiration
              });
            }
            i++;
          }
          storedKeys.sort(function(a, b) {
            return b.expiration - a.expiration;
          });
          targetSize = (value || '').length;
          while (storedKeys.length && targetSize > 0) {
            storedKey = storedKeys.pop();
            removeItem(storedKey.key);
            removeItem(expirationKey(storedKey.key));
            targetSize -= storedKey.size;
          }
          try {
            setItem(key, value);
          } catch (_error) {
            e = _error;
            return;
          }
        } else {
          return;
        }
      }
      if (time) {
        return setItem(expirationKey(key), (currentTime() + time).toString(EXPIRY_RADIX));
      } else {
        return removeItem(expirationKey(key));
      }
    },
    get: function(key) {
      var e, expirationTime, expr, exprKey, value;

      if (!supportsStorage()) {
        return;
      }
      exprKey = expirationKey(key);
      expr = getItem(exprKey);
      if (expr) {
        expirationTime = parseInt(expr, EXPIRY_RADIX);
        if (currentTime() >= expirationTime) {
          removeItem(key);
          removeItem(exprKey);
          return;
        }
      }
      value = getItem(key);
      if (!value || !supportsJSON()) {
        return value;
      }
      try {
        return JSON.parse(value);
      } catch (_error) {
        e = _error;
        return value;
      }
    },
    remove: function(key) {
      if (!supportsStorage()) {
        return;
      }
      removeItem(key);
      return removeItem(expirationKey(key));
    },
    supported: function() {
      return supportsStorage();
    },
    flush: function() {
      var key, _i, _len, _results;

      if (!supportsStorage()) {
        return;
      }
      _results = [];
      for (_i = 0, _len = localStorage.length; _i < _len; _i++) {
        key = localStorage[_i];
        if (key.indexOf(PREFIX + cacheBucket) === 0) {
          _results.push(localStorage.removeItem(key));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    setBucket: function(bucket) {
      return cacheBucket = bucket;
    },
    resetBucket: function() {
      return cacheBucket = '';
    }
  };
})();
